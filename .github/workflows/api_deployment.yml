name: Deploy to Amazon EC2

on:
  push:
    branches:
      - WandileServer

permissions:
  id-token: write
  contents: read

jobs:
  #deploy:
  #  name: Build and Deploy Infrastructure
  #  needs: migration
  #  runs-on: ubuntu-latest
  #  defaults:
  #    run:
  #      shell: bash

  #  steps:
  #    - name: Git checkout 
  #      uses: actions/checkout@v3
#
  #    - name: Configure AWS credentials from AWS account
  #      uses: aws-actions/configure-aws-credentials@v4
  #      with:
  #        role-to-assume: ${{ secrets.AWS_ROLE }}
  #        aws-region: ${{ secrets.AWS_REGION }}
  #        role-session-name: Github-OIDC-TERRAFORM
  #        audience: sts.amazonaws.com
#
  #    - name: Setup Terraform
  #      uses: hashicorp/setup-terraform@v2
  #      with:
  #        terraform_version: 1.6.6
#
  #    - name: Terraform Init 
  #      id: init
  #      working-directory: ./terraform
  #      run: terraform init 
#
  #    - name: Terraform Validate
  #      id: validate
  #      working-directory: ./terraform
  #      run: terraform validate
#
  #    - name: Terraform Plan
  #      id: plan
  #      working-directory: ./terraform
  #      run: terraform plan
#
  #    - name: Terraform Apply
  #      working-directory: ./terraform
  #      run: terraform apply -auto-approve

  build-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: production
    env:
      IMAGE_TAG: ${{ github.sha }}
    # needs: deploy

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v4
      id: creds
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        output-credentials: true
        role-session-name: Github-OIDC-TERRAFORM
        audience: sts.amazonaws.com

    - name: Set IP env variable
      run: |
        EC2_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[?KeyName=='${{ secrets.EC2_SSH_KEY_NAME }}'].PublicIpAddress" --output text)
        echo "::add-mask::$EC2_IP"
        echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 

    - name: Build and push image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EC2
        docker build --build-arg SERVER_NAME=${{ secrets.RDS_SERVER_NAME }} --build-arg DATABASE_NAME=${{ secrets.DB_NAME }} --build-arg USERNAME=${{ secrets.DB_USER }} --build-arg PASSWORD=${{ secrets.DB_PASSWORD }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy docker image to EC2 
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}     
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ steps.creds.outputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ steps.creds.outputs.aws-secret-access-key }}
        IMAGE_TAG: ${{ github.sha }}
        PRIVATE_SSH_KEY: ${{ secrets.EC2_SSH_KEY_NAME }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_IP }}
        username: ubuntu
        key: ${{ env.PRIVATE_SSH_KEY }}
        envs: PRIVATE_SSH_KEY, REGISTRY, REPOSITORY, IMAGE_TAG, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
        script: |-
          $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_PASSWORD }}  );
           sudo docker stop server-api || true
           sudo docker rm server-api || true
           sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
           sudo docker run -d --name server-api -p 5033:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
  # sudo apt update
  # sudp apt install docker.io -y
  # sudo apt install awscli -y
  #sudo docker stop server-api || true
  #sudo docker rm server-api || true
  #migration:
  # name: Run Flyway Migration
  # runs-on: ubuntu-latest
  #
  # steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3.0.0
 #
  #   - name: Run Live Flyway Migrations
  #     uses: joshuaavalon/flyway-action@v3.0.0
  #     with:
  #       url: ${{ secrets.DB_URL }}
  #       user: ${{ secrets.DB_USER }}
  #       password: ${{ secrets.DB_PASSWORD }}
  #       locations:  filesystem:./migrations
  #     env:
  #       FLYWAY_VALIDATE_MIGRATION_NAMING: true
